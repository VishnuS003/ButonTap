import asyncio
import json
import os
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.future import select
from fastapi.responses import JSONResponse
from fastapi import FastAPI
from dotenv import load_dotenv

from db import async_session, Player  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —ç—Ç–æ—Ç –º–æ–¥—É–ª—å

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ .env")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
api = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(commands=["start"])
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Play üå∑", url="https://butontap.com")],
        [InlineKeyboardButton(text="Official channel", url="https://t.me/ButonTapGame")]
    ])
    await message.answer(
        "<b>üå∑ Welcome to BUTON TAP!</b>\n\n"
        "üíé Tap the tulip, earn coins & diamonds!\n"
        "‚ú® Unlock boosters & grow your power.\n"
        "üéÅ Get daily rewards.\n"
        "üë• Invite friends & get bonuses!",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ WebApp –¥–∞–Ω–Ω—ã—Ö
@router.message(lambda m: m.web_app_data is not None)
async def handle_webapp_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
    except json.JSONDecodeError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    async with async_session() as session:
        result = await session.execute(select(Player).where(Player.id == data["id"]))
        player = result.scalars().first()

        if not player:
            player = Player(
                id=data["id"],
                username=data.get("username", ""),
                telegram_user_id=message.from_user.id,
                taps=data.get("taps", 0),
                diamonds=data.get("diamonds", 0),
            )
            session.add(player)
        else:
            player.taps = data.get("taps", 0)
            player.diamonds = data.get("diamonds", 0)
            player.username = data.get("username", player.username)

        await session.commit()

    await message.answer("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

# –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
dp.include_router(router)

# –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@api.on_event("startup")
async def on_startup():
    asyncio.create_task(dp.start_polling(bot))

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@api.get("/")
async def index():
    return {"status": "Bot is running on Timeweb Cloud üöÄ"}

# üî• –õ–∏–¥–µ—Ä–±–æ—Ä–¥
@api.get("/leaderboard")
async def get_leaderboard():
    async with async_session() as session:
        result = await session.execute(
            select(Player).order_by(Player.taps.desc()).limit(10)
        )
        players = result.scalars().all()

        leaderboard = [{
            "username": p.username,
            "weeklyTaps": p.taps
        } for p in players]

        return JSONResponse(content={"players": leaderboard})

